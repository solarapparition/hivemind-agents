"""Structure for Aranea agents."""

from dataclasses import dataclass, asdict, field
from ruamel.yaml import YAML
from typing import List
import datetime
import random
import string


def generate_id() -> str:
    """Generate an ID for an agent."""
    timestamp = datetime.datetime.now().strftime("%Y%m%d%H%M%S")
    random_str = "".join(random.choices(string.ascii_uppercase + string.digits, k=5))
    return f"{timestamp}-{random_str}"


# TODO: add id generation to toolkit


@dataclass
class Aranea:
    """A recursively specializing agent."""

    rank: int
    task_history: List[str]
    core_instructions: str
    learnings: str
    id: str = field(default_factory=generate_id)
    serialized_attributes: tuple[str, ...] = (
        "id",
        "rank",
        "task_history",
        "core_instructions",
        "learnings",
    )

    def serialize(self) -> str:
        """Serialize the agent to YAML."""
        yaml = YAML()
        agent_data = {
            k: v for k, v in asdict(self).items() if k in self.serialized_attributes
        }
        return yaml.dump(agent_data)


# Usage
agent = Aranea(
    id="",  # Will be generated by __post_init__
    rank=0,
    task_history=["task1", "task2"],
    core_instructions="Primary directive here.",
    learnings="Adaptations from past tasks.",
)

serialized_agent = agent.serialize()
